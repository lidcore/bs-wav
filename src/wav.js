// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var $$String = require("bs-platform/lib/js/string.js");
var BsCallback = require("bs-callback/src/bsCallback.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Buffer$LidcoreBsNode = require("@lidcore/bs-node/src/buffer.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Not_a_wav_file = Caml_exceptions.create("Wav-LidcoreBsWav.Not_a_wav_file");

var buf = Buffer$LidcoreBsNode.from(/* None */0, " ");

function input_byte(ic) {
  var partial_arg = ic.fd;
  return BsCallback.$great$great((function (param) {
                return Fs$LidcoreBsNode.read(/* None */0, /* None */0, /* None */0, partial_arg, buf, param);
              }), (function (param) {
                if (param[0] !== 1) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "wav.ml",
                          26,
                          4
                        ]
                      ];
                }
                ic.offset = ic.offset + 1 | 0;
                var partial_arg = Buffer$LidcoreBsNode.get(param[1], 0);
                return (function (param) {
                    return BsCallback.$$return(partial_arg, param);
                  });
              }));
}

function read_float_num_bytes(ic, len) {
  var l = $$Array.to_list(Caml_array.caml_make_vect(len, 0));
  return BsCallback.fold_lefti(/* None */0, (function (cur, idx, _) {
                return BsCallback.$great$great(input_byte(ic), (function (b) {
                              var partial_arg = b * Math.pow(256, idx) + cur;
                              return (function (param) {
                                  return BsCallback.$$return(partial_arg, param);
                                });
                            }));
              }), (function (param) {
                return BsCallback.$$return(0, param);
              }), l);
}

function read_int(ic) {
  return BsCallback.$great$great(read_float_num_bytes(ic, 4), (function (ret) {
                var partial_arg = ret | 0;
                return (function (param) {
                    return BsCallback.$$return(partial_arg, param);
                  });
              }));
}

function read_short(ic) {
  return BsCallback.$great$great(read_float_num_bytes(ic, 2), (function (ret) {
                var partial_arg = ret | 0;
                return (function (param) {
                    return BsCallback.$$return(partial_arg, param);
                  });
              }));
}

function read_string(ic, n) {
  var n$1 = n;
  var buf = Buffer$LidcoreBsNode.alloc(n$1);
  var partial_arg = ic.fd;
  return BsCallback.$great$great((function (param) {
                return Fs$LidcoreBsNode.read(/* None */0, /* None */0, /* None */0, partial_arg, buf, param);
              }), (function (param) {
                var ret = param[0];
                if (ret !== n$1) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "wav.ml",
                          53,
                          4
                        ]
                      ];
                }
                ic.offset = ic.offset + (ret | 0) | 0;
                var partial_arg = Buffer$LidcoreBsNode.toString(/* None */0, /* None */0, /* None */0, param[1]);
                return (function (param) {
                    return BsCallback.$$return(partial_arg, param);
                  });
              }));
}

function read(path) {
  var check = function (condition, reason) {
    if (condition) {
      return (function (param) {
          return BsCallback.$$return(/* () */0, param);
        });
    } else {
      var partial_arg = [
        Not_a_wav_file,
        reason
      ];
      return (function (param) {
          return BsCallback.fail(partial_arg, param);
        });
    }
  };
  var fmt_len = [-1];
  var chan_num = [-1];
  var samp_hz = [-1];
  var byt_per_sec = [-1];
  var byt_per_samp = [-1];
  var bit_per_samp = [-1];
  return BsCallback.$great$great((function (param) {
                return Fs$LidcoreBsNode.openFile(path, "r", param);
              }), (function (fd) {
                var ic = {
                  fd: fd,
                  offset: 0
                };
                var partial_arg = read_int(ic);
                var tmp;
                if (fmt_len[0] > 16) {
                  var partial_arg$1 = read_float_num_bytes(ic, fmt_len[0] - 16 | 0);
                  tmp = (function (param) {
                      return BsCallback.discard(partial_arg$1, param);
                    });
                } else {
                  tmp = (function (param) {
                      return BsCallback.$$return(/* () */0, param);
                    });
                }
                return BsCallback.$great$great(BsCallback.seqa(/* None */0, /* array */[
                                BsCallback.$great$great(read_string(ic, 4), (function (ret) {
                                        return check(ret === "RIFF", "Bad header: \"RIFF\" expected");
                                      })),
                                (function (param) {
                                    return BsCallback.discard(partial_arg, param);
                                  }),
                                BsCallback.$great$great(read_string(ic, 4), (function (ret) {
                                        return check(ret === "WAVE", "Bad header: \"WAVE\" expected");
                                      })),
                                BsCallback.$great$great(read_string(ic, 4), (function (ret) {
                                        return check(ret === "fmt ", "Bad header: \"fmt \" expected");
                                      })),
                                BsCallback.$great$great(read_int(ic), (function (ret) {
                                        fmt_len[0] = ret;
                                        return check(ret >= 16, "Bad header: invalid \"fmt \" length");
                                      })),
                                BsCallback.$great$great(read_short(ic), (function (ret) {
                                        return check(ret === 1, "Bad header: unhandled codec");
                                      })),
                                BsCallback.$great$great(read_short(ic), (function (ret) {
                                        chan_num[0] = ret;
                                        return (function (param) {
                                            return BsCallback.$$return(/* () */0, param);
                                          });
                                      })),
                                BsCallback.$great$great(read_int(ic), (function (ret) {
                                        samp_hz[0] = ret;
                                        return (function (param) {
                                            return BsCallback.$$return(/* () */0, param);
                                          });
                                      })),
                                BsCallback.$great$great(read_int(ic), (function (ret) {
                                        byt_per_sec[0] = ret;
                                        return (function (param) {
                                            return BsCallback.$$return(/* () */0, param);
                                          });
                                      })),
                                BsCallback.$great$great(read_short(ic), (function (ret) {
                                        byt_per_samp[0] = ret;
                                        return (function (param) {
                                            return BsCallback.$$return(/* () */0, param);
                                          });
                                      })),
                                BsCallback.$great$great(read_short(ic), (function (ret) {
                                        bit_per_samp[0] = ret;
                                        return (function (param) {
                                            return BsCallback.$$return(/* () */0, param);
                                          });
                                      })),
                                tmp,
                                BsCallback.$great$great(read_string(ic, 4), (function (ret) {
                                        var header = [ret];
                                        return (function (param) {
                                            return BsCallback.repeat((function () {
                                                          var partial_arg = header[0] !== "data";
                                                          return (function (param) {
                                                              return BsCallback.$$return(partial_arg, param);
                                                            });
                                                        }), (function () {
                                                          return BsCallback.$great$great(read_int(ic), (function (len) {
                                                                        var partial_arg = read_string(ic, len);
                                                                        return BsCallback.$great$great((function (param) {
                                                                                      return BsCallback.discard(partial_arg, param);
                                                                                    }), (function () {
                                                                                      return BsCallback.$great$great(read_string(ic, 4), (function (ret) {
                                                                                                    header[0] = ret;
                                                                                                    return (function (param) {
                                                                                                        return BsCallback.$$return(/* () */0, param);
                                                                                                      });
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }), param);
                                          });
                                      }))
                              ]), (function () {
                              return BsCallback.$great$great(read_int(ic), (function (length) {
                                            return BsCallback.$great$great((function (param) {
                                                          return Fs$LidcoreBsNode.close(fd, param);
                                                        }), (function () {
                                                          var partial_arg = {
                                                            channels: chan_num[0],
                                                            sample_rate: samp_hz[0],
                                                            bytes_per_second: byt_per_sec[0],
                                                            bytes_per_sample: byt_per_samp[0],
                                                            bits_per_sample: bit_per_samp[0],
                                                            data_offset: ic.offset,
                                                            duration: length / byt_per_sec[0]
                                                          };
                                                          return (function (param) {
                                                              return BsCallback.$$return(partial_arg, param);
                                                            });
                                                        }));
                                          }));
                            }));
              }));
}

function short_string(i) {
  var up = i / 256 | 0;
  var down = i - (up << 8) | 0;
  return $$String.make(1, Pervasives.char_of_int(down)) + $$String.make(1, Pervasives.char_of_int(up));
}

function int_string(n) {
  var b = Caml_string.caml_create_string(4);
  b[0] = Pervasives.char_of_int(n & 255);
  b[1] = Pervasives.char_of_int(((n & 65280) >>> 8));
  b[2] = Pervasives.char_of_int(((n & 16711680) >>> 16));
  b[3] = Pervasives.char_of_int(((n & 2130706432) >>> 24));
  return Bytes.to_string(b);
}

function write(header, data, path) {
  return BsCallback.$great$great((function (param) {
                return Fs$LidcoreBsNode.openFile(path, "w", param);
              }), (function (fd) {
                var write = function (param, param$1) {
                  var fd$1 = fd;
                  var data = param;
                  var cb = param$1;
                  var written = [0];
                  var len = data.length;
                  var buf = Buffer$LidcoreBsNode.from(/* Some */["binary"], data);
                  Buffer$LidcoreBsNode.length(buf);
                  return BsCallback.repeat((function () {
                                var partial_arg = written[0] < len;
                                return (function (param) {
                                    return BsCallback.$$return(partial_arg, param);
                                  });
                              }), (function () {
                                var offset = written[0];
                                var partial_arg = /* Some */[offset];
                                return BsCallback.$great$great((function (param) {
                                              return Fs$LidcoreBsNode.write(/* None */0, partial_arg, /* None */0, fd$1, buf, param);
                                            }), (function (param) {
                                              written[0] = written[0] + (param[0] | 0) | 0;
                                              return (function (param) {
                                                  return BsCallback.$$return(/* () */0, param);
                                                });
                                            }));
                              }), cb);
                };
                var dlen = data.length;
                var partial_arg = int_string(36 + dlen | 0);
                var partial_arg$1 = int_string(16);
                var partial_arg$2 = short_string(1);
                var partial_arg$3 = short_string(header.channels);
                var partial_arg$4 = int_string(header.sample_rate);
                var partial_arg$5 = int_string(header.bytes_per_second);
                var partial_arg$6 = short_string(header.bytes_per_sample);
                var partial_arg$7 = short_string(header.bits_per_sample);
                var partial_arg$8 = int_string(dlen);
                return BsCallback.$unknown$great(BsCallback.seqa(/* None */0, /* array */[
                                (function (param) {
                                    return write("RIFF", param);
                                  }),
                                (function (param) {
                                    return write(partial_arg, param);
                                  }),
                                (function (param) {
                                    return write("WAVE", param);
                                  }),
                                (function (param) {
                                    return write("fmt ", param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$1, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$2, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$3, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$4, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$5, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$6, param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$7, param);
                                  }),
                                (function (param) {
                                    return write("data", param);
                                  }),
                                (function (param) {
                                    return write(partial_arg$8, param);
                                  }),
                                (function (param) {
                                    return write(data, param);
                                  })
                              ]), (function () {
                              return (function (param) {
                                  return Fs$LidcoreBsNode.close(fd, param);
                                });
                            }));
              }));
}

exports.Not_a_wav_file = Not_a_wav_file;
exports.read = read;
exports.write = write;
/* buf Not a pure module */
